import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
@EnableBatchProcessing
public class ADEJobConfig {

    @Value("${batch.page-size}")
    int pageSize;

    @Autowired
    private BatchJobConfigImpl<ADEData, ADEData> batchJobConfigImpl;

    private static final String jobName = "adeJob";
    private static final String stepName = "adeStep";

    @Value("Select 'CUSTOMER_MASTER' as Business_Context_Type, ' ' as Business_Sub_Context_type, party_identifier as Business_Key, 'JP_AFS_CUST_NUM' as Element_Name_Id, 'TXT' as Data_type, oblg_1 as Data_Value_Text")
    private String selectClause;

    @Value("from e938445.acbs_migration_process")
    private String fromClause;

    @Value("where acbs_service = 'Create Customer' and processed <> 0")
    private String whereClause;

    @Value("party_identifier")
    private String orderByClause;

    @Value("ADE_JOB")
    private String batchName;

    @Bean(name = jobName)
    public Job adeJob(JobRepository jobRepository, @Qualifier(stepName) Step step) {
        return new JobBuilder(jobName, jobRepository)
                .incrementer(new RunIdIncrementer())
                .start(step)
                .build();
    }

    @Bean(name = stepName)
    public Step adeStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) throws Exception {
        AsyncItemWriter<ADEData> writer = batchJobConfigImpl.asyncWriter(
                batchJobConfigImpl.jdbcBatchItemWriter(
                        "INSERT INTO acos_frb_dev.res_ade_export (business_context_type, business_sub_context_type, business_key, element_name_id, data_type, data_value_text) VALUES (:businessContextType, :businessSubContextType, :businessKey, :elementNameId, :dataType, :dataValueText)",
                        new ADEDataSqlParameterSourceProvider()
                )
        );
        return batchJobConfigImpl.getStep(
                stepName,
                pageSize,
                jobRepository,
                transactionManager,
                batchName,
                getPagingItemReader(),
                batchJobConfigImpl.asyncProcessor(batchName, itemProcessor()),
                writer
        );
    }

    @Bean
    public JdbcPagingItemReader<ADEData> getPagingItemReader() throws Exception {
        Map<String, Object> parameters = getQueryParams();
        OraclePagingQueryProvider queryProvider = getOraclePagingQueryProvider(selectClause, fromClause, whereClause);
        return batchJobConfigImpl.pagingItemReader(queryProvider, parameters, new ADEDataRowMapper());
    }

    private Map<String, Object> getQueryParams() {
        Map<String, Object> parameters = new HashMap<>();
        return parameters;
    }

    private OraclePagingQueryProvider getOraclePagingQueryProvider(String selectClause, String fromClause, String whereClause) {
        OraclePagingQueryProvider queryProvider = new OraclePagingQueryProvider();
        queryProvider.setSelectClause(selectClause);
        queryProvider.setFromClause(fromClause);
        queryProvider.setWhereClause(whereClause);
        Map<String, Order> orderByKeys = new HashMap<>();
        orderByKeys.put(orderByClause, Order.ASCENDING);
        queryProvider.setSortKeys(orderByKeys);
        return queryProvider;
    }

    @Bean
    public ItemProcessor<ADEData, ADEData> itemProcessor() {
        return item -> {
            // Add processing logic if needed
            return item;
        };
    }
}
