import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

public class TestCaseGenerator {

    public static void main(String[] args) {
        try {
            String packageName = "your.package.name"; // Update with your package name
            List<Class<?>> classes = getClasses(packageName);
            for (Class<?> clazz : classes) {
                generateTestCases(clazz);
            }
        } catch (ClassNotFoundException | IOException e) {
            e.printStackTrace();
        }
    }

    public static List<Class<?>> getClasses(String packageName) throws IOException, ClassNotFoundException {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        String path = packageName.replace('.', '/');
        Enumeration<URL> resources = classLoader.getResources(path);
        List<File> directories = new ArrayList<>();
        while (resources.hasMoreElements()) {
            URL resource = resources.nextElement();
            directories.add(new File(resource.getFile()));
        }
        List<Class<?>> classes = new ArrayList<>();
        for (File directory : directories) {
            classes.addAll(findClasses(directory, packageName));
        }
        return classes;
    }

    public static List<Class<?>> findClasses(File directory, String packageName) throws ClassNotFoundException {
        List<Class<?>> classes = new ArrayList<>();
        if (!directory.exists()) {
            return classes;
        }
        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                assert !file.getName().contains(".");
                classes.addAll(findClasses(file, packageName + "." + file.getName()));
            } else if (file.getName().endsWith(".class")) {
                classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
            }
        }
        return classes;
    }

    public static void generateTestCases(Class<?> clazz) {
        Constructor<?>[] constructors = clazz.getDeclaredConstructors();
        for (Constructor<?> constructor : constructors) {
            try {
                Object[] parameters = new Object[constructor.getParameterCount()];
                for (int i = 0; i < parameters.length; i++) {
                    parameters[i] = generateTestData(constructor.getParameterTypes()[i]);
                }
                Object instance = constructor.newInstance(parameters);
                System.out.println("Generated Test Case for " + clazz.getSimpleName() + ": " + instance);
            } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
                e.printStackTrace();
            }
        }
    }

    public static Object generateTestData(Class<?> type) {
        if (type.equals(String.class)) {
            return "testString";
        } else if (type.equals(int.class) || type.equals(Integer.class)) {
            return 123;
        } else if (type.equals(double.class) || type.equals(Double.class)) {
            return 123.45;
        } else if (type.equals(boolean.class) || type.equals(Boolean.class)) {
            return true;
        } else if (type.equals(List.class)) {
            List<String> list = new ArrayList<>();
            list.add("item1");
            list.add("item2");
            return list;
        } else {
            return null; // You may need to handle other data types accordingly
        }
    }
}
