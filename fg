import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

public class TestCaseGenerator {

    private static final String TEST_PACKAGE = "testcases"; // Define the package for test cases

    public static void main(String[] args) {
        try {
            String packageName = "your.package.name"; // Update with your package name
            List<Class<?>> classes = getClasses(packageName);
            for (Class<?> clazz : classes) {
                generateTestCases(clazz);
            }
        } catch (ClassNotFoundException | IOException e) {
            e.printStackTrace();
        }
    }

    public static List<Class<?>> getClasses(String packageName) throws IOException, ClassNotFoundException {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        String path = packageName.replace('.', '/');
        Enumeration<URL> resources = classLoader.getResources(path);
        List<File> directories = new ArrayList<>();
        while (resources.hasMoreElements()) {
            URL resource = resources.nextElement();
            directories.add(new File(resource.getFile()));
        }
        List<Class<?>> classes = new ArrayList<>();
        for (File directory : directories) {
            classes.addAll(findClasses(directory, packageName));
        }
        return classes;
    }

    public static List<Class<?>> findClasses(File directory, String packageName) throws ClassNotFoundException {
        List<Class<?>> classes = new ArrayList<>();
        if (!directory.exists()) {
            return classes;
        }
        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                assert !file.getName().contains(".");
                classes.addAll(findClasses(file, packageName + "." + file.getName()));
            } else if (file.getName().endsWith(".class")) {
                classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
            }
        }
        return classes;
    }

    public static void generateTestCases(Class<?> clazz) {
        String testClassName = clazz.getSimpleName() + "Test"; // Test class name based on original class name
        StringBuilder testCasesContent = new StringBuilder();
        testCasesContent.append("import org.junit.Test;\n");
        testCasesContent.append("import static org.junit.Assert.*;\n\n");
        testCasesContent.append("public class ").append(testClassName).append(" {\n\n");

        Constructor<?>[] constructors = clazz.getDeclaredConstructors();
        for (Constructor<?> constructor : constructors) {
            constructor.setAccessible(true); // Make constructor accessible
            try {
                Object[] parameters = new Object[constructor.getParameterCount()];
                for (int i = 0; i < parameters.length; i++) {
                    parameters[i] = generateTestData(constructor.getParameterTypes()[i]);
                }
                Object instance = constructor.newInstance(parameters);
                String testCase = generateTestCase(constructor, instance);
                testCasesContent.append(testCase);
            } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
                e.printStackTrace();
            }
        }
        testCasesContent.append("\n}");
        writeTestCasesToFile(TEST_PACKAGE, testClassName, testCasesContent.toString());
    }

    public static String generateTestCase(Constructor<?> constructor, Object instance) {
        StringBuilder testCase = new StringBuilder();
        testCase.append("\t@Test\n");
        testCase.append("\tpublic void test").append(constructor.getName()).append("() {\n");
        testCase.append("\t\t// Test ").append(instance.getClass().getSimpleName()).append(" constructor\n");
        testCase.append("\t\t").append(instance.getClass().getSimpleName()).append(" obj = new ").append(instance.getClass().getSimpleName()).append("(");
        Class<?>[] parameterTypes = constructor.getParameterTypes();
        for (int i = 0; i < parameterTypes.length; i++) {
            if (i > 0) {
                testCase.append(", ");
            }
            testCase.append(generateTestData(parameterTypes[i]));
        }
        testCase.append(");\n");
        testCase.append("\t\t// Add assertions here\n");
        testCase.append("\t}\n\n");
        return testCase.toString();
    }

    public static Object generateTestData(Class<?> type) {
        if (type.equals(String.class)) {
            return "\"testString\"";
        } else if (type.equals(int.class) || type.equals(Integer.class)) {
            return "123";
        } else if (type.equals(double.class) || type.equals(Double.class)) {
            return "123.45";
        } else if (type.equals(boolean.class) || type.equals(Boolean.class)) {
            return "true";
        } else {
            return "null"; // You may need to handle other data types accordingly
        }
    }

    public static void writeTestCasesToFile(String packageName, String className, String content) {
        String packageDir = packageName.replace(".", "/");
        String filePath = packageDir + "/" + className + ".java";
        File directory = new File(packageDir);
        if (!directory.exists()) {
            directory.mkdirs();
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
