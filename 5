@Configuration
public class FacilityBatchConfig {

    @Autowired
    private DataSource acbsDataSource;

    @Bean(name = "ADE_FACILITY_STEP")
    public Step adeFacilityStep(JobRepository jobRepository,
                                PlatformTransactionManager transactionManager,
                                @Qualifier("ADE_FACILITY_READER") JdbcPagingItemReader<ADEFacilityDto> adeFacilityReader,
                                @Qualifier("ADE_FACILITY_PROCESSOR") AdeFacilityProcessor adeFacilityProcessor,
                                @Qualifier("ADE_FACILITY_WRITER") JdbcBatchItemWriter<ADEFacilityDto> adeFacilityWriter) {
        return new StepBuilder("ADE_FACILITY_STEP", jobRepository)
                .<ADEFacilityDto, ADEFacilityDto>chunk(10, transactionManager)
                .reader(adeFacilityReader)
                .processor(adeFacilityProcessor)
                .writer(adeFacilityWriter)
                .build();
    }

    @Bean(name = "ADE_FACILITY_READER")
    public JdbcPagingItemReader<ADEFacilityDto> getFacilityADEPagingItemReader() throws Exception {
        Map<String, Object> parameters = getQueryParams();
        JdbcPagingItemReader<ADEFacilityDto> reader = new JdbcPagingItemReader<>();
        reader.setDataSource(acbsDataSource);
        reader.setPageSize(10);
        reader.setRowMapper(new ADEFacilityRowMapper());

        PagingQueryProvider queryProvider = createQueryProvider();
        reader.setQueryProvider(queryProvider);
        reader.setParameterValues(parameters);

        return reader;
    }

    private PagingQueryProvider createQueryProvider() throws Exception {
        String selectClause = "a.portfolio_identifier, a.facility_identifier, LPAD(a.obligor, 4, '0') AS obligor, "
                + "d.DC_3_300_PURPOSE_CODE, n.nl_dbid_value, n.nl_dbid_code, n.nl_dbid_desc, "
                + "LPAD(a.obligation, 4, '0') AS dataValueText";
        String fromClause = "acbs_frb_dev.acbs_migration_process a "
                + "JOIN acbs_frb_dev.dc3300 d ON a.obligor = d.dc_3_300_obligor "
                + "JOIN acbs_frb_dev.numeric_literals n ON d.DC_3_300_PURPOSE_CODE = n.nl_dbid_value";
        String whereClause = "a.acos_service = 'Create Facility' AND a.processed <> 0 AND n.nl_dbid_code = 'F086'";
        String sortKey = "a.party_identifier";

        SqlPagingQueryProviderFactoryBean factory = new SqlPagingQueryProviderFactoryBean();
        factory.setDataSource(acbsDataSource);
        factory.setSelectClause(selectClause);
        factory.setFromClause(fromClause);
        factory.setWhereClause(whereClause);
        factory.setSortKey(sortKey);

        return factory.getObject();
    }

    private Map<String, Object> getQueryParams() {
        Map<String, Object> parameters = new HashMap<>();
        // Add any parameters needed for the query here
        return parameters;
    }

    @Bean(name = "ADE_FACILITY_WRITER")
    public JdbcBatchItemWriter<ADEFacilityDto> adeFacilityWriter() {
        String insertQuery = "INSERT INTO JMGNEB (DSOWNC, DSDWOC, DSDWPI, DSDWQT, DSDWRC, DSDWST) "
                            + "VALUES (?, ?, ?, ?, ?, ?)";

        return new JdbcBatchItemWriterBuilder<ADEFacilityDto>()
                .itemPreparedStatementSetter((item, ps) -> {
                    ps.setString(1, "CUSTOMER_MASTER"); // assuming this maps to DSOWNC
                    ps.setString(2, item.getBusiness_Sub_Context_Type()); // maps to DSDWOC
                    ps.setString(3, item.getPortfolio_identifier() + item.getFacility_identifier()); // maps to DSDWPI (businessKey)
                    ps.setString(4, item.getBid_value() + item.getBid_descirption()); // maps to DSDWQT (elementNameId)
                    ps.setString(5, "TXT"); // assuming this maps to DSDWRC (dataType)
                    ps.setString(6, item.getDataTextValue()); // maps to DSDWST (dataValueText)
                })
                .sql(insertQuery)
                .dataSource(acbsDataSource)
                .build();
    }

    @Bean(name = "CREATE_FACILITY_JOB")
    public Job createFacilityJob(JobRepository jobRepository,
                                 @Qualifier("CREATE_FACILITY_STEP") Step createFacilityStep,
                                 @Qualifier("ADD_FACILITY_SUBLIMIT_STEP") Step addFacilitySublimitStep,
                                 @Qualifier("ADD_ACCRUAL_FEE_STEP") Step addAccrualFeeStep,
                                 @Qualifier("ADD_FACILITY_PRICING_RULE_STEP") Step addFacilityPricingRuleStep,
                                 @Qualifier("ADD_FACILITY_FIXED_FEE_STEP") Step addFacilityFixedFeeStep,
                                 @Qualifier("ADE_FACILITY_STEP") Step adeFacilityStep) throws Exception {
        return new JobBuilder("CREATE_FACILITY_JOB", jobRepository)
                .start(adeFacilityStep)
                .next(createFacilityStep)
                .next(addFacilitySublimitStep)
                .next(addAccrualFeeStep)
                .next(addFacilityPricingRuleStep)
                .next(addFacilityFixedFeeStep)
                .build();
    }
}


public class ADEFacilityRowMapper implements RowMapper<ADEFacilityDto> {

    @Override
    public ADEFacilityDto mapRow(ResultSet rs, int rowNum) throws SQLException {
        return ADEFacilityDto.builder()
                .portfolio_identifier(rs.getString("portfolio_identifier"))
                .facility_identifier(rs.getString("facility_identifier"))
                .Business_Context_Type(rs.getString("business_context_type"))
                .Business_Sub_Context_Type(rs.getString("business_sub_context_type"))
                .Business_Key(rs.getString("business_key"))
                .dataTextValue(rs.getString("data_value_text"))
                .ELement_Name_Id(rs.getString("element_name_id"))
                .bid_value(rs.getString("bid_value"))
                .bid_descirption(rs.getString("bid_descirption"))
                .purpose_code(rs.getString("purpose_code"))
                .obligor(rs.getInt("obligor"))
                .obligation(rs.getInt("obligation"))
                .build();
    }
}



@Component
public class AdeFacilityProcessor implements ItemProcessor<ADEFacilityDto, ADEFacilityDto> {

    private final AdeTransformations adeTransformations;

    public AdeFacilityProcessor(AdeTransformations adeTransformations) {
        this.adeTransformations = adeTransformations;
    }

    @Override
    public ADEFacilityDto process(ADEFacilityDto item) throws Exception {
        return ADEFacilityDto.builder()
                .Business_Context_Type(item.getBusiness_Context_Type())
                .Business_Key(adeTransformations.getPortfolio(item.getPortfolio_identifier(), item.getFacility_identifier()))
                .Business_Sub_Context_Type(item.getBusiness_Sub_Context_Type())
                .obligation(item.getObligation())
                .obligor(item.getObligor())
                .build();
    }
}
