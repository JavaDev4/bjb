import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DescriptionService {

    private DataSource dataSource;

    public DescriptionService(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public String getDescriptionByCup(String cup) {
        String sql = "SELECT description FROM literal WHERE cup = ?";
        try (Connection conn = dataSource.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, cup);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("description");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }


import org.springframework.batch.core.Job;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class JobChecker {

    private JobService jobService;

    @Autowired
    public JobChecker(Job job) {
        this.jobService = new JobService(job);
    }

    public void checkJobName() {
        String jobName = jobService.getJobName();
        if ("MySpecificJob".equals(jobName)) {
            System.out.println("This is the job we were looking for!");
            // Additional logic can be implemented here
        } else {
            System.out.println("This is not the job we were looking for.");
        }
    }
}

}


import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import javax.sql.DataSource;

@Service
public class DescriptionService {
    private final JdbcTemplate jdbcTemplate;

    public DescriptionService(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    public String getDescriptionByCup(String cup) {
        String sql = "SELECT description, hvalue FROM literal WHERE cup = ?";
        return jdbcTemplate.queryForObject(sql, new Object[]{cup}, (rs, rowNum) -> {
            String description = rs.getString("description");
            String hvalue = rs.getString("hvalue");
            return description + " " + hvalue; // Concatenate the description and hvalue with a space
        });
    }
}


import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;

@Component
public class JobUtils extends JobExecutionListenerSupport {

    private final ThreadLocal<String> currentJobName = new ThreadLocal<>();

    @Autowired
    private JobNameHolder jobNameHolder;

    @Override
    public void beforeJob(JobExecution jobExecution) {
        currentJobName.set(jobExecution.getJobInstance().getJobName());
        jobNameHolder.setJobName(currentJobName.get());
    }

    @Override
    public void afterJob(JobExecution jobExecution) {
        currentJobName.remove();
        jobNameHolder.clear();
    }
}

@Component
public class JobNameHolder {
    private volatile String jobName;

    public String getJobName() {
        return jobName;
    }

    public void setJobName(String jobName) {
        this.jobName = jobName;
    }

    public void clear() {
        this.jobName = null;
    }
}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class SomeService {
    
    @Autowired
    private JobNameHolder jobNameHolder;

    public void performTask() {
        String jobName = jobNameHolder.getJobName();
        if ("specificJobName".equals(jobName)) {
            // Perform specific tasks
        }
    }
}

